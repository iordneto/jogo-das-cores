{"version":3,"sources":["data.js","utils.js","components/Title.jsx","components/StartButton.jsx","components/Timer.jsx","components/GameBoard.jsx","App.jsx","serviceWorker.js","index.js"],"names":["wordsAndAnswers","word","answer","nameOfColors","name","colors","backGroundColor","textColor","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","getRandomIntInclusive","min","max","ceil","Title","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getRandomColorStyle","randomNumber","randomColor","textShadow","concat","color","titleStyle","fontSize","fontFamily","fontWeight","padding","textTransform","titleStyleCombined","objectSpread","react_default","a","createElement","style","PureComponent","StartButton","backgroundColor","border","startButtonStyle","startButtonStyleCombined","onClick","onStart","timerStyle","position","top","right","width","textAlign","Timer","state","secondsRemaining","seconds","startCountDown","bind","assertThisInitialized","tick","setState","stop","clearInterval","intervalHandle","startCounter","setInterval","start","mainStyle","display","flexDirection","topStyle","alignItems","justifyContent","margin","answersBoardStyle","flexWrap","wordStyle","mainWordStyle","answerWordStyle","cursor","GameBoard","getAnswerOptions","correctAnswer","correctAnswerOption","filter","value","optionsWithoutCorrectAnswer","otherAnswerOptions","index","toConsumableArray","next","question","lastColorsIndexes","onScore","onFinish","_this2","wordAndAnswer","answerOptions","randomColorStyle","map","_ref","key","height","App","showResults","handleScore","score","alert","components_Title","components_StartButton","Timer_Timer","GameBoard_GameBoard","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fb7f3c25.chunk.js","sourcesContent":["export const wordsAndAnswers = [\r\n  { word: \"maçã\", answer: \"red\" },\r\n  { word: \"banana\", answer: \"yellow\" },\r\n  { word: \"sol\", answer: \"yellow\" },\r\n  { word: \"céu\", answer: \"blue\" },\r\n  { word: \"oceano\", answer: \"blue\" },\r\n  { word: \"grêmio\", answer: \"blue\" },\r\n  { word: \"inter\", answer: \"red\" },\r\n  { word: \"girassol\", answer: \"yellow\" },\r\n  { word: \"cenoura\", answer: \"orange\" },\r\n  { word: \"alface\", answer: \"green\" },\r\n  { word: \"morango\", answer: \"red\" },\r\n  { word: \"limão\", answer: \"green\" },\r\n  { word: \"tomate\", answer: \"red\" },\r\n  { word: \"bob esponja\", answer: \"yellow\" },\r\n  { word: \"smurf\", answer: \"blue\" },\r\n  { word: \"Shrek\", answer: \"green\" },\r\n  { word: \"Simpsons\", answer: \"yellow\" },\r\n  { word: \"Patrick Estrela\", answer: \"pink\" },\r\n  { word: \"Peppa Pig\", answer: \"pink\" },\r\n  { word: \"Minions\", answer: \"yellow\" },\r\n  { word: \"Facebook\", answer: \"blue\" },\r\n  { word: \"Twitter\", answer: \"blue\" },\r\n  { word: \"Coração\", answer: \"red\" },\r\n  { word: \"Arroz\", answer: \"white\" },\r\n  { word: \"Pneu\", answer: \"black\" },\r\n  { word: \"Neve\", answer: \"white\" },\r\n  { word: \"Snapchat\", answer: \"yellow\" },\r\n  { word: \"Galinha Pintadinha\", answer: \"blue\" },\r\n  { word: \"Netflix\", answer: \"red\" },\r\n  { word: \"Spotify\", answer: \"green\" }\r\n];\r\n\r\nexport const nameOfColors = [\r\n  { name: \"Vermelho\", answer: \"red\" },\r\n  { name: \"Azul\", answer: \"blue\" },\r\n  { name: \"Amarelo\", answer: \"yellow\" },\r\n  { name: \"Verde\", answer: \"green\" },\r\n  { name: \"Rosa\", answer: \"pink\" },\r\n  { name: \"Branco\", answer: \"white\" },\r\n  { name: \"Preto\", answer: \"black\" },\r\n  { name: \"Laranja\", answer: \"orange\" }\r\n];\r\n\r\nexport const colors = [\r\n  { backGroundColor: \"red\", textColor: \"blue\" },\r\n  { backGroundColor: \"blue\", textColor: \"red\" },\r\n  { backGroundColor: \"yellow\", textColor: \"green\" },\r\n  { backGroundColor: \"green\", textColor: \"black\" },\r\n  { backGroundColor: \"pink\", textColor: \"blue\" },\r\n  { backGroundColor: \"white\", textColor: \"green\" },\r\n  { backGroundColor: \"black\", textColor: \"orange\" },\r\n  { backGroundColor: \"orange\", textColor: \"white\" }\r\n];\r\n","export const shuffle = array => {\r\n  var currentIndex = array.length,\r\n    temporaryValue,\r\n    randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex -= 1;\r\n\r\n    // And swap it with the current element.\r\n    temporaryValue = array[currentIndex];\r\n    array[currentIndex] = array[randomIndex];\r\n    array[randomIndex] = temporaryValue;\r\n  }\r\n\r\n  return array;\r\n};\r\n\r\nexport function getRandomIntInclusive(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n","import React, { PureComponent } from \"react\";\r\n\r\nimport { colors } from \"../data\";\r\nimport { getRandomIntInclusive } from \"../utils\";\r\n\r\nclass Title extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.titleStyle = {\r\n      fontSize: \"5rem\",\r\n      fontFamily: \"Montserrat, sans-serif\",\r\n      fontWeight: \"bold\",\r\n      padding: \".5rem\",\r\n      textTransform: \"uppercase\"\r\n    };\r\n  }\r\n\r\n  getRandomColorStyle = () => {\r\n    const randomNumber = getRandomIntInclusive(0, 7);\r\n    const randomColor = colors[randomNumber];\r\n\r\n    return {\r\n      textShadow: `-1px 0 ${randomColor.textColor}, 0 1px ${\r\n        randomColor.textColor\r\n      }, 1px 0 ${randomColor.textColor}, 0 -1px ${randomColor.textColor}`,\r\n      color: randomColor.backGroundColor\r\n    };\r\n  };\r\n\r\n  render() {\r\n    const titleStyleCombined = {\r\n      ...this.getRandomColorStyle(),\r\n      ...this.titleStyle\r\n    };\r\n    return <h1 style={titleStyleCombined}>Jogo das cores</h1>;\r\n  }\r\n}\r\n\r\nexport default Title;\r\n","import React, { PureComponent } from \"react\";\r\n\r\nimport { colors } from \"../data\";\r\nimport { getRandomIntInclusive } from \"../utils\";\r\n\r\nclass StartButton extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.startButtonStyle = {\r\n      fontSize: \"3rem\",\r\n      padding: \"2rem\"\r\n    };\r\n  }\r\n\r\n  getRandomColorStyle = () => {\r\n    const randomNumber = getRandomIntInclusive(0, 7);\r\n    const randomColor = colors[randomNumber];\r\n\r\n    return {\r\n      backgroundColor: randomColor.backGroundColor,\r\n      border: `2px solid ${randomColor.textColor}`,\r\n      color: randomColor.textColor\r\n    };\r\n  };\r\n\r\n  render() {\r\n    const startButtonStyleCombined = {\r\n      ...this.getRandomColorStyle(),\r\n      ...this.startButtonStyle\r\n    };\r\n    return (\r\n      <button onClick={this.props.onStart} style={startButtonStyleCombined}>\r\n        Começar\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StartButton;\r\n","import React, { PureComponent } from \"react\";\r\n\r\nconst timerStyle = {\r\n  position: \"fixed\",\r\n  top: 0,\r\n  right: 0,\r\n  fontSize: \"1.5rem\",\r\n  fontFamily: \"Orbitron, sans-serif\",\r\n  padding: \"2rem\",\r\n  color: \"green\",\r\n  backgroundColor: \"black\",\r\n  width: \"15rem\",\r\n  textAlign: \"center\"\r\n};\r\n\r\nexport default class Timer extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      secondsRemaining: this.props.seconds\r\n    };\r\n\r\n    this.startCountDown = this.startCountDown.bind(this);\r\n    this.tick = this.tick.bind(this);\r\n  }\r\n\r\n  async tick() {\r\n    await this.setState({ secondsRemaining: this.state.secondsRemaining - 1 });\r\n\r\n    if (this.state.secondsRemaining === 0) {\r\n      this.props.stop();\r\n      clearInterval(this.intervalHandle);\r\n    }\r\n  }\r\n\r\n  startCountDown() {\r\n    this.setState({ startCounter: true });\r\n    this.intervalHandle = setInterval(this.tick, 1000);\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.start) {\r\n      this.startCountDown();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <div style={timerStyle}>Tempo: {this.state.secondsRemaining}s</div>;\r\n  }\r\n}\r\n","import React, { PureComponent } from \"react\";\r\n\r\nimport { colors, nameOfColors } from \"../data\";\r\nimport { getRandomIntInclusive, shuffle } from \"../utils\";\r\n\r\nconst mainStyle = {\r\n  display: \"flex\",\r\n  flexDirection: \"column\"\r\n};\r\n\r\nconst topStyle = {\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"center\",\r\n  margin: \"4rem 0\"\r\n};\r\n\r\nconst answersBoardStyle = {\r\n  display: \"flex\",\r\n  flexDirection: \"row\",\r\n  flexWrap: \"wrap\",\r\n  justifyContent: \"center\"\r\n};\r\n\r\nconst wordStyle = {\r\n  fontFamily: \"Montserrat, sans-serif\",\r\n  fontWeight: \"bold\",\r\n  padding: \"1rem\",\r\n  textTransform: \"capitalize\"\r\n};\r\n\r\nconst mainWordStyle = {\r\n  fontSize: \"6rem\"\r\n};\r\n\r\nconst answerWordStyle = {\r\n  fontSize: \"4rem\",\r\n  width: \"35%\",\r\n  margin: \"1rem\",\r\n  textAlign: \"center\",\r\n  cursor: \"pointer\"\r\n};\r\n\r\nexport default class GameBoard extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.wordsAndAnswers = shuffle(this.props.wordsAndAnswers);\r\n\r\n    this.next = this.next.bind(this);\r\n\r\n    this.state = {\r\n      question: 0,\r\n      lastColorsIndexes: []\r\n    };\r\n  }\r\n\r\n  async next(correctAnswer, answer) {\r\n    if (correctAnswer === answer) {\r\n      await this.props.onScore();\r\n    }\r\n\r\n    if (this.state.question !== this.wordsAndAnswers.length - 1) {\r\n      await this.setState({\r\n        question: this.state.question + 1\r\n      });\r\n    } else {\r\n      this.props.onFinish();\r\n    }\r\n  }\r\n\r\n  getRandomColorStyle = () => {\r\n    const randomNumber = getRandomIntInclusive(0, 7);\r\n    const randomColor = colors[randomNumber];\r\n\r\n    return {\r\n      backgroundColor: randomColor.backGroundColor,\r\n      border: `2px solid ${randomColor.textColor}`,\r\n      color: randomColor.textColor\r\n    };\r\n  };\r\n\r\n  getAnswerOptions = correctAnswer => {\r\n    const correctAnswerOption = nameOfColors.filter(\r\n      value => value.answer === correctAnswer\r\n    );\r\n\r\n    const optionsWithoutCorrectAnswer = nameOfColors.filter(\r\n      value => value.answer !== correctAnswer\r\n    );\r\n\r\n    const otherAnswerOptions = shuffle(optionsWithoutCorrectAnswer).filter(\r\n      (value, index) => index < 3\r\n    );\r\n\r\n    return shuffle([...correctAnswerOption, ...otherAnswerOptions]);\r\n  };\r\n\r\n  render() {\r\n    const wordAndAnswer = this.wordsAndAnswers[this.state.question];\r\n    const answerOptions = this.getAnswerOptions(wordAndAnswer.answer);\r\n    const randomColorStyle = this.getRandomColorStyle();\r\n\r\n    return (\r\n      <div style={mainStyle}>\r\n        <div style={topStyle}>\r\n          <div\r\n            style={{\r\n              ...wordStyle,\r\n              ...mainWordStyle,\r\n              ...randomColorStyle\r\n            }}\r\n          >\r\n            {wordAndAnswer.word}\r\n          </div>\r\n        </div>\r\n        <div style={answersBoardStyle}>\r\n          {answerOptions.map(({ name, answer }, index) => (\r\n            <div\r\n              key={index}\r\n              style={{\r\n                ...wordStyle,\r\n                ...answerWordStyle,\r\n                ...this.getRandomColorStyle()\r\n              }}\r\n              onClick={() => this.next(wordAndAnswer.answer, answer)}\r\n            >\r\n              {name}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from \"react\";\n\nimport Title from \"./components/Title\";\nimport StartButton from \"./components/StartButton\";\nimport Timer from \"./components/Timer\";\nimport GameBoard from \"./components/GameBoard\";\n\nimport { wordsAndAnswers } from \"./data\";\n\nconst mainStyle = {\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  width: \"100%\",\n  height: \"100vh\",\n  backgroundColor: \"#F1F8FF\"\n};\n\nexport default class App extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.startCountDown = this.startCountDown.bind(this);\n    this.showResults = this.showResults.bind(this);\n    this.handleScore = this.handleScore.bind(this);\n\n    this.state = {\n      score: 0,\n      startCounter: false,\n      showResults: false\n    };\n  }\n\n  handleScore() {\n    this.setState({ score: this.state.score + 1 });\n  }\n\n  startCountDown() {\n    this.setState({\n      score: 0,\n      startCounter: true,\n      showResults: false\n    });\n  }\n\n  showResults() {\n    alert(\n      `Você acertou ${this.state.score} de um total de ${\n        wordsAndAnswers.length\n      } palavras!`\n    );\n\n    this.setState({\n      startCounter: false,\n      showResults: true\n    });\n  }\n\n  render() {\n    return (\n      <div style={mainStyle}>\n        {!this.state.startCounter && (\n          <div>\n            <Title>Jogo das Cores</Title>\n            <StartButton onStart={this.startCountDown} />\n          </div>\n        )}\n        {this.state.startCounter && (\n          <div>\n            <Timer\n              seconds={60}\n              start={this.state.startCounter}\n              stop={this.showResults}\n            />\n            <GameBoard\n              wordsAndAnswers={wordsAndAnswers}\n              onScore={this.handleScore}\n              onFinish={this.showResults}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}